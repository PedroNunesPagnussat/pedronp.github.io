<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Clean Code on Pedro Nunes Pagnussat</title>
    <link>//localhost:1313/tags/clean-code/</link>
    <description>Recent content in Clean Code on Pedro Nunes Pagnussat</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 21 Mar 2025 10:00:00 +0000</lastBuildDate>
    <atom:link href="//localhost:1313/tags/clean-code/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Clean Code Principles Every Developer Should Know</title>
      <link>//localhost:1313/blogs/clean-code-principles/</link>
      <pubDate>Fri, 21 Mar 2025 10:00:00 +0000</pubDate>
      <guid>//localhost:1313/blogs/clean-code-principles/</guid>
      <description>&lt;p&gt;Writing clean code is an art that takes years to master. In this post, I&amp;rsquo;ll share some fundamental principles that can help you write more maintainable and readable code.&lt;/p&gt;&#xA;&lt;h2 id=&#34;why-clean-code-matters&#34;&gt;Why Clean Code Matters&lt;/h2&gt;&#xA;&lt;p&gt;Clean code isn&amp;rsquo;t just about aestheticsâ€”it&amp;rsquo;s about maintainability, scalability, and collaboration. Code that&amp;rsquo;s easy to understand is:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Easier to debug&lt;/li&gt;&#xA;&lt;li&gt;Simpler to modify&lt;/li&gt;&#xA;&lt;li&gt;More enjoyable to work with&lt;/li&gt;&#xA;&lt;li&gt;Less prone to bugs&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;key-principles&#34;&gt;Key Principles&lt;/h2&gt;&#xA;&lt;h3 id=&#34;1-meaningful-names&#34;&gt;1. Meaningful Names&lt;/h3&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Bad&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;calc&lt;/span&gt;(a, b):&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; a &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; b&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Good&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;calculate_total_price&lt;/span&gt;(base_price, tax):&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; base_price &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; tax&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Names should reveal intent. Whether it&amp;rsquo;s a variable, function, or class, the name should tell you why it exists, what it does, and how it&amp;rsquo;s used.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
